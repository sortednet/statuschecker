// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sortednet/statuschecker/internal/statuschecker (interfaces: StatusService)

// Package web is a generated GoMock package.
package web

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	statuschecker "github.com/sortednet/statuschecker/internal/statuschecker"
)

// MockStatusService is a mock of StatusService interface.
type MockStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockStatusServiceMockRecorder
}

// MockStatusServiceMockRecorder is the mock recorder for MockStatusService.
type MockStatusServiceMockRecorder struct {
	mock *MockStatusService
}

// NewMockStatusService creates a new mock instance.
func NewMockStatusService(ctrl *gomock.Controller) *MockStatusService {
	mock := &MockStatusService{ctrl: ctrl}
	mock.recorder = &MockStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusService) EXPECT() *MockStatusServiceMockRecorder {
	return m.recorder
}

// GetAllServiceStatus mocks base method.
func (m *MockStatusService) GetAllServiceStatus(arg0 context.Context) []statuschecker.ServiceStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllServiceStatus", arg0)
	ret0, _ := ret[0].([]statuschecker.ServiceStatus)
	return ret0
}

// GetAllServiceStatus indicates an expected call of GetAllServiceStatus.
func (mr *MockStatusServiceMockRecorder) GetAllServiceStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllServiceStatus", reflect.TypeOf((*MockStatusService)(nil).GetAllServiceStatus), arg0)
}

// GetServiceStatus mocks base method.
func (m *MockStatusService) GetServiceStatus(arg0 context.Context, arg1 string) statuschecker.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceStatus", arg0, arg1)
	ret0, _ := ret[0].(statuschecker.Status)
	return ret0
}

// GetServiceStatus indicates an expected call of GetServiceStatus.
func (mr *MockStatusServiceMockRecorder) GetServiceStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceStatus", reflect.TypeOf((*MockStatusService)(nil).GetServiceStatus), arg0, arg1)
}

// RegisterService mocks base method.
func (m *MockStatusService) RegisterService(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterService", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterService indicates an expected call of RegisterService.
func (mr *MockStatusServiceMockRecorder) RegisterService(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterService", reflect.TypeOf((*MockStatusService)(nil).RegisterService), arg0, arg1, arg2)
}

// UnregisterService mocks base method.
func (m *MockStatusService) UnregisterService(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterService indicates an expected call of UnregisterService.
func (mr *MockStatusServiceMockRecorder) UnregisterService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterService", reflect.TypeOf((*MockStatusService)(nil).UnregisterService), arg0, arg1)
}
