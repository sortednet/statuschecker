// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: services.sql

package store

import (
	"context"
)

const getService = `-- name: GetService :one
SELECT name, url FROM services
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetService(ctx context.Context, name string) (Service, error) {
	row := q.db.QueryRowContext(ctx, getService, name)
	var i Service
	err := row.Scan(&i.Name, &i.Url)
	return i, err
}

const getServices = `-- name: GetServices :many
SELECT name, url FROM services
ORDER BY name
`

func (q *Queries) GetServices(ctx context.Context) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, getServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(&i.Name, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerService = `-- name: RegisterService :one
INSERT INTO services (
    name, url
) VALUES (
    $1, $2
) RETURNING name, url
`

type RegisterServiceParams struct {
	Name string
	Url  string
}

func (q *Queries) RegisterService(ctx context.Context, arg RegisterServiceParams) (Service, error) {
	row := q.db.QueryRowContext(ctx, registerService, arg.Name, arg.Url)
	var i Service
	err := row.Scan(&i.Name, &i.Url)
	return i, err
}

const unregisterService = `-- name: UnregisterService :exec
DELETE FROM services
WHERE name = $1
`

func (q *Queries) UnregisterService(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, unregisterService, name)
	return err
}
